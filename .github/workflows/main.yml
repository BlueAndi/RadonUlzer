name: main

# Controls when the action will run.
on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]
  release:
    # A release, pre-release, or draft of a release is published.
    types: [ published ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The introduction just shows some useful informations.
  intro:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: .github/workflows/requirements.txt
    
    - name: Install dependencies
      run: |
        pip install -r .github/workflows/requirements.txt

  # Build all targets
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    strategy:
      matrix:
        environment: ["CalibTarget", "ConvoyFollowerTarget", "ConvoyLeaderTarget", "LineFollowerTarget", "LineFollowerSimpleTarget", "RemoteControlTarget", "SensorFusionTarget"]

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: .github/workflows/requirements.txt
    
    - name: Install dependencies
      run: |
        pip install -r .github/workflows/requirements.txt
    
    - name: Compile ${{ matrix.environment }} firmware
      run: platformio run --environment ${{ matrix.environment }}
    
  # Perform static checks and test
  check:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    strategy:
      matrix:
        environment: ["CalibTarget", "ConvoyFollowerTarget", "ConvoyLeaderTarget", "LineFollowerTarget", "LineFollowerSimpleTarget", "RemoteControlTarget", "SensorFusionTarget", "TestSim"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: .github/workflows/requirements.txt
    
    - name: Install dependencies
      run: |
        pip install -r .github/workflows/requirements.txt

    - name: Perform static checks on ${{ matrix.environment }}
      run: platformio check --environment ${{ matrix.environment }} --fail-on-defect=medium --fail-on-defect=high

  # Perform tests
  test:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: .github/workflows/requirements.txt
    
    - name: Install dependencies
      run: |
        pip install -r .github/workflows/requirements.txt

    - name: Run tests on native environment
      run: platformio test --environment TestSim -vvv

  # Build documentation
  doc:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    strategy:
      matrix:
        environment: ["CalibTarget", "ConvoyFollowerTarget", "ConvoyLeaderTarget", "LineFollowerTarget", "LineFollowerSimpleTarget", "RemoteControlTarget", "SensorFusionTarget", "CalibSim", "ConvoyFollowerSim", "ConvoyLeaderSim", "LineFollowerSim", "LineFollowerSimpleSim", "RemoteControlSim", "SensorFusionSim"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: .github/workflows/requirements.txt
    
    - name: Install dependencies
      run: |
        pip install -r .github/workflows/requirements.txt

    - name: Set up graphviz
      uses: ts-graphviz/setup-graphviz@v2

    - name: Set up doxygen and generate documentation for ${{ matrix.environment }}
      uses: mattnotmitt/doxygen-action@v1.9.8
      with:
        working-directory: './doc/doxygen'
        doxyfile-path: './${{ matrix.environment }}Doxyfile'

    - name: Print doxygen warnings
      if: ${{ failure() }}
      run: cat ./doc/doxygen/doxygen_warnings.txt

  # Lint Python code
  lint:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: .github/workflows/requirements.txt
      
      - name: Install dependencies
        run: |
          pip install -r .github/workflows/requirements.txt

      - name: Analysing the code with pylint
        run: |
          pylint ./webots/controllers/*/*.py
