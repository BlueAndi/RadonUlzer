@startuml RemoteControl DrivingState

title Release Track State

package "Application" as appLayer {

    class DrivingState <<control>> {
        + {static} getInstance() : DrivingState
        + entry() : void
        + process(sm : StateMachine&) : void
        + exit() : void
    }

    class ReadyState <<control>>

    class ParameterSet <<struct>>

    class ParameterSets <<entity>> {
        + {static} getInstance() : ParameterSets&
        + choose(setId : uint8_t) : void
        + next() : void
        + getCurrentSetId() const : uint8_t
        + getParameterSet() : ParameterSet&
    }

    ParameterSet --+ ParameterSets
    ParameterSet "3" <--* ParameterSets

    DrivingState .r.> ReadyState: <<use>>
    DrivingState .u.> ParameterSets: <<use>>
}

package "Service" as serviceLayer {

    class SimpleTimer <<service>> {
        + start(duration : uint32_t) : void
        + restart() : void
        + stop() : void
        + isTimeout() : bool
    }

    class Sound <<service>> {
        + playAlarm() : void
        + playBeep() : void
    }

    class Odometry <<service>> {
        + {static} getInstance() : Odometry&
        + process() : void
        + getMileageCenter() : uint32_t
        + clearMileage() : void
    }

    class PIDController < T > <<service>> {
        + calculate(setPoint : T, processValue : T) : T
        + getPFactor(numerator : T&, denominator : T&) : void
        + setPFactor(numerator : T, denominator : T) : void
        + getIFactor(numerator : T&, denominator : T&) : void
        + setIFactor(numerator : T, denominator : T) : void
        + getDFactor(numerator : T&, denominator : T&) : void
        + setDFactor(numerator : T, denominator : T) : void
        + setLimits(min : T, max : T) : void
        + clear() : void
        + getSampleTime() : uint32_t
        + setSampleTime(sampleTime : uint32_t) : void
        + enforceCalculationOnce() : void
        + resync() : void
    }

    class MovAvg < T, length > <<service>> {
        + clear() : void
        + write(value : T) : T
        + getResult() : T
    }
}

package "HAL" as hal {

    package "Interfaces" as halInterfaces {
        interface IDisplay {
            + {abstract} clear() : void
            + {abstract} gotoXY(xCoord : uint8_t, yCoord : uint8_t) : void
            + {abstract} print(str : const String&) : size_t
            + {abstract} print(str : const char[]) : size_t
            + {abstract} print(value : uint8_t) : size_t
            + {abstract} print(value : uint16_t) : size_t
            + {abstract} print(value : uint32_t) : size_t
            + {abstract} print(value : int8_t) : size_t
            + {abstract} print(value : int16_t) : size_t
            + {abstract} print(value : int32_t) : size_t
        }

        interface IMotors {
            + {abstract} setSpeeds(leftSpeed : int16_t, rightSpeed : int16_t) : void
            + {abstract} getMaxSpeed() : int16_t
        }

        interface IProximitySensors {
            + {abstract} initFrontSensor() : void
            + {abstract} getNumSensors() : const : uint8_t
            + {abstract} read() : void
            + {abstract} countsFrontWithLeftLeds() const : uint8_t
            + {abstract} countsFrontWithRightLeds() const : uint8_t
        }

        interface ILed {
            + {abstract} enable(enableIt : bool) : void
        }
    }

    class Board << namespace >> {
        + getDisplay() : IDisplay&
        + getMotors() : IMotors&
        + getProximitySensors() : IProximitySensors&
        + getLedYellow() : ILed&
    }
}

DrivingState *--> SimpleTimer
DrivingState *--> Sound
DrivingState *--> Odometry
DrivingState *--> PIDController
DrivingState *--> MovAvg
DrivingState ...> IDisplay: <<use>>
DrivingState ...> IMotors: <<use>>
DrivingState ...> IProximitySensors: <<use>>
DrivingState ...> ILed: <<use>>
DrivingState ...> Board:: <<use>>

@enduml