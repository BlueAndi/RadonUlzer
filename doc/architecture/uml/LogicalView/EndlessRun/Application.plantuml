@startuml

title Application

package "Application" as appLayer {

    class App <<main>> {
        + setup() : void
        + loop() : void
    }

    note left of App
        The program entry point.
    end note

    class StateMachine {
        + setState(state : IState*) : void
        + getState() : IState*
        + process() : void
    }

    note left of StateMachine
        The state machine executes always one
        state exclusive. It is responsible to
        enter/leave/process a state.
    end note

    interface IState {
        + {abstract} entry() : void
        + {abstract} process(sm : StateMachine&) : void
        + {abstract} exit() : void
    }

    note left of IState
        Defines the abstract state interface,
        which forces every inherited class
        to realize it.
    end note

    class StartupState 
    class MotorSpeedCalibrationState 
    class LineSensorsCalibrationState 
    class ErrorState 
    class DrivingState 
    class ColorState 
    class ReadyState 

    class ParameterSets <<entity>>

    note bottom of ParameterSets
        The default parameter is being selected.
    end note

    note bottom of StartupState
        The system starts up.
    end note

    note bottom of MotorSpeedCalibrationState
        The robot drives with full speed forward
        and with full speed backwar to determine
        the max speed in steps/s. The slowest
        motor is considered!
    end note

    note bottom of LineSensorsCalibrationState
        The robot turns several times the
        line sensors over the track for
        calibration.
    end note

    note bottom of ErrorState
        Error information is shown on display.
        Confirmation from operator is requested.
    end note

    note bottom of DrivingState
        The robot follows the line, handles
        any detected gap and processes received
        traffic light colors.
    end note

    note bottom of ColorState
        The robot checks if new color ID have been
        received through SMP/USB.
    end note

    note bottom of ReadyState
        The robot is stopped and waits for
        operator input.
    end note

}

note top of  appLayer
    Hint: See the application state behaviour
    in the corresponding state diagram.

    The ParameterSets supports several parameters,
    e.g. to initialize the PID controller and the
    top speed.
end note

App *--> StateMachine

StateMachine o--> "0..1" IState

IState <|.. StartupState: <<realize>>
IState <|.... MotorSpeedCalibrationState: <<realize>>
IState <|.. LineSensorsCalibrationState: <<realize>>
IState <|.... ErrorState: <<realize>>
IState <|.. ReadyState: <<realize>>
IState <|.... DrivingState: <<realize>>
IState <|... ColorState: <<realize>>

DrivingState ..> ParameterSets: <<use>>

@enduml