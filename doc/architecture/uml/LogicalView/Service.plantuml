@startuml

title Service

package "Service" as serviceLayer {

    class Sound <<service>>

    note top of Sound
        Dedicated functions supporting the
        standard beep and the alarm tone.
    end note

    class SimpleTimer <<service>>

    note top of SimpleTimer
        Provides an easy interface for
        timer handling on the base of
        the Arduino millis().
    end note

    class Odometry <<service>>

    note top of Odometry
        Provides odometry information:
            * Absolute position
            * Orientation
            * Mileage
    end note

    class PIDController <<service>>

    note top of PIDController
        A PID controller used for driving
        on the track.
    end note

    class MovAvg < T, length > <<service>>

    note top of MovAvg
        Moving average filter which can be
        configured at compile time.
    end note

    class RelativeEncoder <<service>>

    note top of RelativeEncoder
        Calculates the relative encoder
        steps from a reference point.
    end note

    class Speedometer <<service>>

    note top of Speedometer
        Determines the linear speed left/right/center
        in [steps/s].
    end note

    class DifferentialDrive <<service>>

    note top of DifferentialDrive
        Steering the robot with linear (steps/s) and
        angular speed [mrad/s] by controlling the
        speed with PID controllers.
    end note

    class SerialMuxProt <<service>>

    note top of SerialMuxProt
        Communication Protocol for transmitting 
        and receiving information to/from a remote
        client using data channels
    end note

    DifferentialDrive -[hidden]-- MovAvg
    Speedometer -[hidden]-- Odometry
    RelativeEncoder -[hidden]-- PIDController
    SimpleTimer -[hidden]-- Sound
}

@enduml