@startuml HAL IMU

title Hardware Abstraction Layer - IMU

package "HAL" as hal {

    package "HAL Interfaces" as halInterfaces {
        interface "IBoard" as iBoard {
            + {abstract} getIMU() : IIMU&
            + init() : void
        }
        interface "IIMU" as iIMU {
            + {abstract} init() : bool
            + {abstract} readAcc() : void
            + {abstract} readGyro() : void
            + {abstract} readMag() : void
            + {abstract} accDataReady() : bool
            + {abstract} gyroDataReady() : bool
            + {abstract} magDataReady() : bool
            + {abstract} getAccelerationValues(int16_t* accelerationValues) : void
            + {abstract} getTurnRates(int16_t* turnRates) : void
            + {abstract} getMagnetometerValues(int16_t* magnetometerValues) : void

        }
    }

    package "HAL Simulation" as simulation {
        class "IMU" as ImuSim {
            -  m_accelerationValues[3] : int16_t
            -  m_gyroValues[3] : int16_t
            -  m_magnetometerValues[3] : int16_t
            +  init() : bool
            +  readAcc() : void
            +  readGyro() : void
            +  readMag() : void
            +  accDataReady() : bool
            +  gyroDataReady() : bool
            +  magDataReady() : bool
            +  getAccelerationValues(int16_t* accelerationValues) : void
            +  getTurnRates(int16_t* turnRates) : void
            +  getMagnetometerValues(int16_t* magnetometerValues) : void
        }
        class "Board" as BoardSim {
            - m_imu : IMU
            + getIMU() : IMU&
            + init() : void
        }
    }

    package "HAL Target" as target {
        class "IMU" as ImuTarget {
            -  m_accelerationValues[3] : vector<int16_t> 
            -  m_gyroValues[3] : vector<int16_t> 
            -  m_magnetometerValues[3] : vector<int16_t> 
            +  init() : bool
            +  readAcc() : void
            +  readGyro() : void
            +  readMag() : void
            +  accDataReady() : bool
            +  gyroDataReady() : bool
            +  magDataReady() : bool
            +  getAccelerationValues(int16_t* accelerationValues) : void
            +  getTurnRates(int16_t* turnRates) : void
            +  getMagnetometerValues(int16_t* magnetometerValues) : void
        }
        class "Board" as BoardTarget{
            - m_imu : IMU
            + getIMU() : IMU&
            + init() : void
        }
    }
    }
    iIMU <|... ImuSim: <<realize>>
    iBoard <|... BoardSim: <<realize>>
    iBoard *-- iIMU

    iIMU <|... ImuTarget: <<realize>>
    iBoard <|... BoardTarget: <<realize>>


package "Webots library"  as webotsLib {
    class Accelerometer {
        + getValues() : double *
        + enable(int samplingPeriod) : void
    }
    class Gyro {
        + getValues() : double *
        + enable(int samplingPeriod) : void
    }
    class Compass {
        + getValues() : double *
        + enable(int samplingPeriod) : void
    }
}

package "Zumo32U4 library"  as zumo32u4Lib {

    class Zumo32U4IMU {
        -  a[3] : vector<int16_t> 
        -  g[3] : vector<int16_t> 
        -  m[3] : vector<int16_t> 
        +  init() : bool
        +  readAcc() : void
        +  readGyro() : void
        +  readMag() : void
        +  accDataReady() : bool
        +  gyroDataReady() : bool
        +  magDataReady() : bool
    }
}

note bottom of zumo32u4Lib
    Provided by Pololu.
    https://pololu.github.io/zumo-32u4-arduino-library/index.html
end note

note bottom of webotsLib
    Provided by Cyberbotics.
    https://cyberbotics.com/doc/reference/thanks?version=R2023b
end note

ImuTarget *--> Zumo32U4IMU

ImuSim *--> Accelerometer
ImuSim *--> Gyro
ImuSim *--> Compass

note left of iIMU
    IMU stands for Inertial Measurement Unit.
end note

note left of hal
    This diagram shows the added IMU component.
    Classes like the LineSensors or Motors
    are missing.
end note


@enduml