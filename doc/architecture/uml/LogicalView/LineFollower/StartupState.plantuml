@startuml

title Startup State

package "Application" as appLayer {

    class StartupState <<control>> {
        + {static} getInstance() : StartupState
        + entry() : void
        + process(sm : StateMachine&) : void
        + exit() : void
    }

    class MotorSpeedCalibrationState <<control>>
    class LineSensorsCalibrationState <<control>>

    StartupState .l.> MotorSpeedCalibrationState: <<use>>
    StartupState .r.> LineSensorsCalibrationState: <<use>>
}

package "Service" as serviceLayer {

    class DifferentialDrve <<service>>
}

package "HAL" as hal {

    package "Interfaces" as halInterfaces {
        interface IDisplay {
            + {abstract} clear() : void
            + {abstract} gotoXY(xCoord : uint8_t, yCoord : uint8_t) : void
            + {abstract} print(str : const String&) : size_t
            + {abstract} print(str : const char[]) : size_t
            + {abstract} print(value : uint8_t) : size_t
            + {abstract} print(value : uint16_t) : size_t
            + {abstract} print(value : uint32_t) : size_t
            + {abstract} print(value : int8_t) : size_t
            + {abstract} print(value : int16_t) : size_t
            + {abstract} print(value : int32_t) : size_t
        }

        interface IButton {
            + {abstract} isPressed() : bool
            + {abstract} waitForRelease() : void
        }

        interface ISettings {
            + {abstract} init() : void
            + {abstract} getMaxSpeed() : int16_t
            + {abstract} setMaxSpeed(maxSpeed : int16_t) : void
        }
    }

    class Board << namespace >> {
        + getDisplay() : IDisplay&
        + getButtonA() : IButton&
        + getButtonB() : IButton&
        + getSettings() : ISettings&
    }
}

StartupState ..> DifferentialDrve: <<use>>
StartupState ...> IDisplay: <<use>>
StartupState ...> IButton: <<use>>
StartupState ...> ISettings: <<use>>
StartupState ...> Board:: <<use>>

@enduml