@startuml

title Training State

package "Application" as appLayer {

    class TrainingState <<control>> {
        + {static} getInstance() : TrainingState
        + entry() : void
        + process(sm : StateMachine&) : void
        + exit() : void
    }

    class TrainingState <<control>>

    TrainingState .r.> ReadyState: <<use>>
    
}

package "Service" as serviceLayer {

    class SimpleTimer <<service>> {
        + start(duration : uint32_t) : void
        + restart() : void
        + stop() : void
        + isTimeout() : bool
    }    
    class DifferentialDrive <<service>>
}

package "HAL" as hal {

    package "Interfaces" as halInterfaces {
        interface IDisplay {
            + {abstract} clear() : void
            + {abstract} gotoXY(xCoord : uint8_t, yCoord : uint8_t) : void
            + {abstract} print(str : const String&) : size_t
            + {abstract} print(str : const char[]) : size_t
            + {abstract} print(value : uint8_t) : size_t
            + {abstract} print(value : uint16_t) : size_t
            + {abstract} print(value : uint32_t) : size_t
            + {abstract} print(value : int8_t) : size_t
            + {abstract} print(value : int16_t) : size_t
            + {abstract} print(value : int32_t) : size_t
        }

        interface ILineSensors {
            + {abstract} init() : void
            + {abstract} calibrate() : void
            + {abstract} readLine() : int16_t
            + {abstract} getSensorValues() : const uint16_t*
            + {abstract} isCalibrationSuccessful() : bool
            + {abstract} getCalibErrorInfo() const : uint8_t
            + {abstract} getNumLineSensors() const : uint8_t
            + {abstract} getSensorValueMax() const : uint16_t
        }
           interface IButton {
            + {abstract} isPressed() : bool
            + {abstract} waitForRelease() : void
        }

        interface ILed {
            + {abstract} enable(enableIt : bool) : void
        }

    }

    class Board << namespace >> {
        + getDisplay() : IDisplay&
        + getLineSensors() : ILineSensors&
        + getLedYellow() : ILed&
        + getButtonA() : IButton&
    }
    class WebotsSerialDrv {
        + setRxChannel(channelId: int32_t) : void
        + setTxChannel(channelId: int32_t ) : void
        + print(str: const char[]) : void
        + print(value: uint8_t ) : void
        + print(value: uint16_t ) : void
        + print(value: uint32_t ) : void
        + print(value: int8_t ) : void
        + print(value: int16_t ) : void
        + print(value: int32_t ) : void
        + println(str: const char[]) : void
        + println(value: uint8_t ) : void
        + println(value: uint16_t ) : void
        + println(value: uint32_t ) : void
        + println(value: int8_t ) : void
        + println(value: int16_t ) : void
        + println(value: int32_t ) : void
        + write( buffer: const uint8_t*, length: size_t ) : size_t 
        + readBytes( buffer: uint8_t*, length: size_t ) : size_t 
    }
}

TrainingState *-> SimpleTimer
TrainingState ..> DifferentialDrive: <<use>>
TrainingState ...> IDisplay: <<use>>
TrainingState ...> ILineSensors: <<use>>
TrainingState ...> ILed: <<use>>
TrainingState ...> Board: <<use>>
TrainingState ...>WebotsSerialDrv: <<use>>
TrainingState ...>IButton: <<use>>
@enduml